version: '3.9'
services:
  pg1:
    image: postgres:14
    container_name: pg1
    restart: unless-stopped
    volumes:
      - /tmp/data_pg1:/var/lib/postgresql/data
      ##- ./Postgmake pg1resql1.conf:/var/lib/postgresql/data/postgresql.conf:ro
      ##- ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf:ro
      - ./initdb.sql:/docker-entrypoint-initdb.d/1-init.sql:ro
    networks:
      - pgnet
    environment:
      POSTGRES_DB: cluster
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
  pg2:
    image: postgres:14
    container_name: pg2
    restart: unless-stopped
    volumes:
      - /tmp/data_pg2:/var/lib/postgresql/data
      ##- ./Postgresql2.conf:/etc/postgresql.conf
      ##- ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf:ro
      ##- ./standby.signal:/var/lib/postgresql/data/standby.signal:ro
      ##- ./initdb.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pgnet
    environment:
      POSTGRES_DB: cluster
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password

  pg3:
    image: postgres:14
    container_name: pg3
    restart: unless-stopped
    volumes:
      - /tmp/data_pg3:/var/lib/postgresql/data
      ##- ./Postgresql3.conf:/var/lib/postgresql/data/postgresql.conf
      ##- ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      ##- ./standby.signal:/var/lib/postgresql/data/standby.signal
      ##- ./initdb.sql:/docker-entrypoint-initdb.d/1-portal.sql
      #- ./initdb.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pgnet
    environment:
      POSTGRES_DB: cluster
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password

  redis:
    image: "redis:alpine"
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass password
    ports:
      - "6379:6379"
    networks:
      - pgnet
    volumes:
      - /tmp/redis-data:/var/lib/redis
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      - REDIS_REPLICATION_MODE=master

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ##image: gcr.io/cadvisor/cadvisor:v0.46.0
    ##image: google/cadvisor:latest
    container_name: cadvisor
    restart: always
    privileged: true
    devices:
      - /dev/kmsg
    ##network_mode: "host"
    ports:
      - 9080:8080
    networks:
      - pgnet
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /sys/fs/cgroup/:/cgroup:ro
      - /dev/disk/:/dev/disk:ro
    depends_on:
      - pg1


  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.ignored-mount-points='^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'"
    ports:
      - 9100:9100
    environment:
      TZ: "Europe/Moscow"

  sonet:
    container_name: sonet
    image: sonet:latest
    restart: always
    volumes:
      - ./.env:/app/.env
    ports:
      - target: 8000
        published: 8000
        protocol: tcp
    networks:
      - pgnet
      - default
    environment:
      - GIN_MODE=release
    depends_on:
      - pg1






volumes:
  data_pg1:
  data_pg2:
  data_pg3:

networks:
  pgnet:
    driver: bridge
